{"ast":null,"code":"import { call, takeLatest, put, all, select } from 'redux-saga/effects';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport userActionTypes from '../user/user.types';\nimport { selectCurrentUser } from '../user/user.selector';\nimport { clearCart, setCartFromFirebase } from './cart.actions';\nimport { selectCartItems } from './cart.selectors';\nimport CartActionTypes from './cart.types';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* onUserSignIn() {\n  yield takeLatest(userActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(userActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["/home/starq/reactProjz/ReactECommerceBuildUp/yipee/client/src/redux/cart/cart.sagas.js"],"names":["call","takeLatest","put","all","select","getUserCartRef","userActionTypes","selectCurrentUser","clearCart","setCartFromFirebase","selectCartItems","CartActionTypes","clearCartOnSignOut","updateCartInFirebase","currentUser","cartRef","id","cartItems","update","error","console","log","onUserSignIn","SIGN_IN_SUCCESS","checkCartFromFirebase","payload","user","cartSnapshot","get","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,MAArC,QAAkD,oBAAlD;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAAQC,SAAR,EAAmBC,mBAAnB,QAA6C,gBAA7C;AAEA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,kBAAV,GAA8B;AACjC,QAAMV,GAAG,CAACM,SAAS,EAAV,CAAT;AACH;AAGD,OAAO,UAAUK,oBAAV,GAAiC;AACpC,QAAMC,WAAW,GAAG,MAAMV,MAAM,CAACG,iBAAD,CAAhC;;AACA,MAAIO,WAAJ,EAAiB;AACf,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMV,cAAc,CAACS,WAAW,CAACE,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMb,MAAM,CAACM,eAAD,CAA9B;AACA,YAAMK,OAAO,CAACG,MAAR,CAAe;AAAED,QAAAA;AAAF,OAAf,CAAN;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAID,OAAO,UAAUG,YAAV,GAAyB;AAC9B,QAAMrB,UAAU,CAACK,eAAe,CAACiB,eAAjB,EAAkCC,qBAAlC,CAAhB;AACD;AAED,OAAO,UAAUA,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAmD;AACxD,QAAMX,OAAO,GAAG,MAAMV,cAAc,CAACqB,IAAI,CAACV,EAAN,CAApC;AACA,QAAMW,YAAY,GAAG,MAAMZ,OAAO,CAACa,GAAR,EAA3B;AACA,QAAM1B,GAAG,CAACO,mBAAmB,CAACkB,YAAY,CAACE,IAAb,GAAoBZ,SAArB,CAApB,CAAT;AACD;AAGH,OAAO,UAAUa,gBAAV,GAA4B;AAC/B,QAAM7B,UAAU,CAACK,eAAe,CAACyB,gBAAjB,EAAmCnB,kBAAnC,CAAhB;AACH;AAED,OAAO,UAAUoB,YAAV,GAAyB;AAC5B,QAAM/B,UAAU,CACd,CACEU,eAAe,CAACsB,QADlB,EAEEtB,eAAe,CAACuB,WAFlB,EAGEvB,eAAe,CAACwB,oBAHlB,CADc,EAMdtB,oBANc,CAAhB;AAQD;AAEH,OAAO,UAAUuB,SAAV,GAAqB;AAC1B,QAAMjC,GAAG,CAAC,CAACH,IAAI,CAAC8B,gBAAD,CAAL,EAAyB9B,IAAI,CAACgC,YAAD,CAA7B,EAA6ChC,IAAI,CAACsB,YAAD,CAAjD,CAAD,CAAT;AACD","sourcesContent":["import { call, takeLatest, put, all, select} from 'redux-saga/effects';\n\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport userActionTypes from '../user/user.types';\nimport { selectCurrentUser } from '../user/user.selector';\nimport {clearCart, setCartFromFirebase} from './cart.actions';\n\nimport { selectCartItems } from './cart.selectors';\nimport CartActionTypes from './cart.types';\n\nexport function* clearCartOnSignOut(){\n    yield put(clearCart());\n}\n\n\nexport function* updateCartInFirebase() {\n    const currentUser = yield select(selectCurrentUser);\n    if (currentUser) {\n      try {\n        const cartRef = yield getUserCartRef(currentUser.id);\n        const cartItems = yield select(selectCartItems);\n        yield cartRef.update({ cartItems });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n\n\n  export function* onUserSignIn() {\n    yield takeLatest(userActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n  }\n  \n  export function* checkCartFromFirebase({ payload: user }) {\n    const cartRef = yield getUserCartRef(user.id);\n    const cartSnapshot = yield cartRef.get();\n    yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n  }\n\n\nexport function* onSignOutSuccess(){\n    yield takeLatest(userActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nexport function* onCartChange() {\n    yield takeLatest(\n      [\n        CartActionTypes.ADD_ITEM,\n        CartActionTypes.REMOVE_ITEM,\n        CartActionTypes.CLEAR_ITEM_FROM_CART\n      ],\n      updateCartInFirebase\n    );\n  }\n\nexport function* cartSagas(){\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}"]},"metadata":{},"sourceType":"module"}